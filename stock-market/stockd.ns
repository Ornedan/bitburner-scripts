// stock.getPosition() return array index semantics
const POS_SHARES = 0;
const POS_SHARES_AVG = 1;
const POS_SHORTS = 2;
const POS_SHORTS_AVG = 3;

/** Commission fee: 100k */
const COMMISSION = 100000;

/** Neutral forecast value from the API. */
const FORECAST_NEUTRAL = 0.5;


/** Interval between market updates, in msec */
const CYCLE_INTERVAL = 5000;

/** Maximum fraction of commission price of the total price: 1%. */
const COMMISSION_MAX_FRAC = 0.01;
/** Minimum reserve as fraction of total wealth: 10%. */
const RESERVE_FRAC = 0.1;
/** Minimum cash reserve: 10 million. */
const RESERVE_MIN = 10000000;
/**
 * Minimum deviation from neutral forecast, we don't want
 * to mess with stocks that are pure coinflips.
 */
const FORECAST_NONNEUTRAL_MIN = 0.1;


function cycle(ns) {
    const symbols = ns.stock.getSymbols();
    const stocks = [];

    // 1. Analysis
    let totalWealth = ns.getServerMoneyAvailable("home");

    for (const symbol of symbols) {
        const volatility = ns.stock.getVolatility(symbol);
        const forecast = ns.stock.getForecast(symbol);

        // We score stocks primarly by their distance from neutral forecast, but
        // also by their volatility. For nearly equal stocks, we want the one that
        // changes in the desired direction faster.
        const nonNeutrality = forecast - FORECAST_NEUTRAL;
        const score = Math.pow(Math.abs(nonNeutrality), 1.2) * volatility;

        const stock = {
            symbol: symbol,
            position: ns.stock.getPosition(symbol),
            price: ns.stock.getPrice(symbol),
            max: ns.stock.getMaxShares(symbol),
            volatility: volatility,
            forecast: forecast,
            score: score,
        };

        totalWealth += stock.position[POS_SHARES] * stock.position[POS_SHARES_AVG] +
            stock.position[POS_SHORTS] * stock.position[POS_SHORTS_AVG];

        stocks.push(stock);
    }

    const reserve = Math.max(RESERVE_MIN, RESERVE_FRAC * totalWealth);

    // 2. Sells
    for (const stock of stocks) {
        // 2.1 Sell off long positions that have below neutral forecast
        if (stock.position[POS_SHARES] > 0 && stock.forecast < FORECAST_NEUTRAL) {
            ns.stock.sell(stock.symbol, stock.position[POS_SHARES]);
        }

        // 2.2 Sell off short positions that have above neutral forecast
        if (stock.position[POS_SHORTS] > 0 && stock.forecast > FORECAST_NEUTRAL) {
            ns.stock.sellShort(stock.symbol, stock.position[POS_SHORTS]);
        }
    }

    // 3. Buys
    // Sort by score, descending
    stocks.sort((stock1, stock2) => {
        if (stock1.score > stock2.score)
            return -1;
        if (stock1.score == stock2.score)
            return 0;
        return 1;
    });

    // 3.1 Buy positions on stocks that have noticeably non-neutral forecast
    for (const stock of stocks) {
        if (stock.forecast > FORECAST_NEUTRAL + FORECAST_NONNEUTRAL_MIN) {
            const availableMoney = ns.getServerMoneyAvailable("home") - reserve;
            const toBuy = getAffordableStockCount(ns, stock, availableMoney, "L");
            
            if (toBuy > 0)
                ns.stock.buy(stock.symbol, toBuy);
        }
        else if (stock.forecast < FORECAST_NEUTRAL - FORECAST_NONNEUTRAL_MIN) {
            const availableMoney = ns.getServerMoneyAvailable("home") - reserve;
            const toBuy = getAffordableStockCount(ns, stock, availableMoney, "S");
            
            if (toBuy > 0)
                ns.stock.short(stock.symbol, toBuy);
        }
    }

    // 4. TODO Report some stats?
    /*let report = "";
    for (const stock of stocks) {
        report += sprintf("<br>%5s | %.5f | %.2f | %.2f", stock.symbol, stock.score, stock.forecast, stock.volatility);
    }
    
    ns.print(report);*/
}

function getAffordableStockCount(ns, stock, money, posType) {
    const availableStock = stock.max - stock.position[POS_SHARES] - stock.position[POS_SHORTS];
    if(availableStock <= 0)
        return 0;
    
    // TODO: binary search
    let count = availableStock;
    let price;
    while ((price = ns.stock.getPurchaseCost(stock.symbol, count, posType)) > money && count > 0)
        count = Math.floor(count * 0.9);
    
    // Consider stock unaffordable if the commission fee is too large part of the price
    if (price / (price - COMMISSION) > 1 + COMMISSION_MAX_FRAC)
        return 0;
    
    return count;
}

export async function main(ns) {
    ns.disableLog("getServerMoneyAvailable");
    ns.disableLog("sleep");

    // Cycle until killed
    while (true) {
        cycle(ns);

        await ns.sleep(CYCLE_INTERVAL);
    }
}